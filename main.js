/*
  VARIABLES:
var - old variable (avoid using)
let - a variable with a block scope
const - a variable whose value cannot be changed (also block scope)


Scope   var let const
Global  ‚úÖ Available ‚úÖ Available ‚úÖ Available ‚úÖ Available
Functional  ‚úÖ Available ‚úÖ Available ‚úÖ Available ‚úÖ Available
Block (if, for, {})   ‚ùå Unlimited by block scope ‚úÖ Available ‚úÖ Available
Nested functions (lexical scope)  ‚úÖ Available ‚úÖ Available ‚úÖ Available
*/

/*
  HOISTING:
*/

// ES 5
// Example:
console.log(a)
// == Error

// Example:
console.log(a)
var a;
// == undefined

// Example:
console.log(a)
var a = 5;
// == undefined

// Example:
console.log(a)
var a = 5;
console.log(a)
a = 7;
console.log(a)
// == undefined, 5, 7

// ES 6
// Example:
let b = 99;
console.log(b)
// == 99

// Example:
console.log(c)
let c = 99;
// == Error

/*
  END HOISTING:
*/

/*
  This:

  this. ‚Äî —Ü–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ, —è–∫–µ –≤–∫–∞–∑—É—î –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó.
  –ô–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ç–æ–≥–æ, —è–∫ —ñ –¥–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —Ñ—É–Ω–∫—Ü—ñ—è.

  1Ô∏è‚É£ this —É –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –æ–±–ª–∞—Å—Ç—ñ
  –£ –±—Ä–∞—É–∑–µ—Ä—ñ this –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è –Ω–∞ window.

  2Ô∏è‚É£ this —É —Ñ—É–Ω–∫—Ü—ñ—ó
  üìå –û–≥–æ–ª–æ—à–µ–Ω–∞ –∑–≤–∏—á–∞–π–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º (function)
  üîπ –ë–µ–∑ 'use strict' ‚Üí this –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è –Ω–∞ window (—É –±—Ä–∞—É–∑–µ—Ä—ñ).
  üîπ –ó 'use strict' ‚Üí this –±—É–¥–µ undefined.
*/

function showThis() {
  console.log(this);
}
showThis(); // üñ•Ô∏è –ë—Ä–∞—É–∑–µ—Ä: window

// "use strict";
function showThisStrict() {
  console.log(this);
}
showThisStrict(); // ‚ùå undefined

/*
  3Ô∏è‚É£ this —É –º–µ—Ç–æ–¥–∞—Ö –æ–±'—î–∫—Ç–∞
  üìå –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —è–∫ –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç–∞ ‚Üí this –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è –Ω–∞ —Ü–µ–π –æ–±'—î–∫—Ç.
*/
const person = {
  name: "–Ü–≤–∞–Ω",
  sayHi() {
    console.log(this.name); // ‚úÖ "–Ü–≤–∞–Ω"
  }
};
person.sayHi();

/*
  4Ô∏è‚É£ this —É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö (new)
  üìå this —É —Ñ—É–Ω–∫—Ü—ñ—ó-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ –≤–∫–∞–∑—É—î –Ω–∞ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç.
*/
class User {
  constructor(name) {
    this.name = name;
  }
}
const user1 = new User("–û–ª—è");
console.log(user1.name); // ‚úÖ "–û–ª—è"

/*
5Ô∏è‚É£ this —É —Å—Ç—Ä—ñ–ª–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö (=>)
üìå –£ —Å—Ç—Ä—ñ–ª–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö this –±–µ—Ä–µ—Ç—å—Å—è –∑ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–ª–µ–∫—Å–∏—á–Ω–∏–π this).
*/
const personT = {
  name: "–Ü–≤–∞–Ω",
  sayHi: () => {
    console.log(this.name); // ‚ùå undefined (this = window –∞–±–æ global)
  }
};
personT.sayHi();

const person2 = {
  name: "–û–ª—è",
  sayHi() {
    const arrow = () => console.log(this.name); // ‚úÖ "–û–ª—è" (this –≤—ñ–¥ person2)
    arrow();
  }
};
person2.sayHi();

/*
6Ô∏è‚É£ this —É setTimeout/setInterval
üìå –£ setTimeout –∑–≤–∏—á–∞–π–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º–∞—î this = window, –∞ —Å—Ç—Ä—ñ–ª–∫–æ–≤–∞ –±–µ—Ä–µ this –∑ –æ—Ç–æ—á–µ–Ω–Ω—è.
*/
const obj = {
  name: "–ê–Ω—è",
  sayHi: function () {
    setTimeout(function () {
      console.log(this.name); // ‚ùå undefined (this = window)
    }, 1000);
  }
};
obj.sayHi();
// ‚úÖ –Ø–∫ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏? –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å—Ç—Ä—ñ–ª–∫–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –∞–±–æ .bind(this):
const objT = {
  name: "–ê–Ω—è",
  sayHi: function () {
    setTimeout(() => {
      console.log(this.name); // ‚úÖ "–ê–Ω—è"
    }, 1000);
  }
};
objT.sayHi();

/*
7Ô∏è‚É£ this –∑ call, apply, bind
üìå call —Ç–∞ apply –∑–º—ñ–Ω—é—é—Ç—å this —ñ –æ–¥—Ä–∞–∑—É –≤–∏–∫–ª–∏–∫–∞—é—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é.
*/
function greet() {
  console.log(`–ü—Ä–∏–≤—ñ—Ç, ${this.name}!`);
}

const user = { name: "–Ü–≤–∞–Ω" };
greet.call(user); // ‚úÖ "–ü—Ä–∏–≤—ñ—Ç, –Ü–≤–∞–Ω!"
greet.apply(user); // ‚úÖ "–ü—Ä–∏–≤—ñ—Ç, –Ü–≤–∞–Ω!"

//üìå bind —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–º this, –∞–ª–µ –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î —ó—ó –æ–¥—Ä–∞–∑—É.

const boundGreet = greet.bind(user);
boundGreet(); // ‚úÖ "–ü—Ä–∏–≤—ñ—Ç, –Ü–≤–∞–Ω!"

/*
8Ô∏è‚É£ this —É –∫–ª–∞—Å–∞—Ö
üìå –£ –º–µ—Ç–æ–¥–∞—Ö –∫–ª–∞—Å—É this –≤–∫–∞–∑—É—î –Ω–∞ –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É.
*/
class Car {
  constructor(model) {
    this.model = model;
  }
  showModel() {
    console.log(this.model);
  }
}
const car = new Car("Tesla");
car.showModel(); // ‚úÖ "Tesla"
/*
  END This:
*/
/*
  Functions:
  1Ô∏è‚É£ –û–≥–æ–ª–æ—à–µ–Ω—ñ (Function Declaration)
  –¶—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏–∑–Ω–∞—á–∞—é—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ function –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∑–º—ñ–Ω–Ω—É.
  ‚úÖ –ú–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –î–û –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (hoisting –ø—Ä–∞—Ü—é—î)
  ‚úÖ this –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≤–∏–∫–ª–∏–∫—É

  üìù –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:

  –ü—ñ–¥–Ω—ñ–º–∞—é—Ç—å—Å—è (hoisting) —ñ –º–æ–∂—É—Ç—å –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è –¥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è
  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å this –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º—ñ—Å—Ü—è –≤–∏–∫–ª–∏–∫—É
*/
sayHello(); // ‚úÖ –ü—Ä–∞—Ü—é—î, –±–æ hoisting

function sayHello() {
  console.log("–ü—Ä–∏–≤—ñ—Ç!");
}

sayHello(); // ‚úÖ "–ü—Ä–∏–≤—ñ—Ç!"

/*
  2Ô∏è‚É£ –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –≤–∏—Ä–∞–∑ (Function Expression)
  –¶—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è —ñ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—É.
  ‚ùå –ù–ï –ø—ñ–¥–Ω—ñ–º–∞—é—Ç—å—Å—è (hoisting –Ω–µ –ø—Ä–∞—Ü—é—î)
  ‚úÖ –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≤ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  üìù –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:

  –ù–ï –ø—ñ–¥–Ω—ñ–º–∞—é—Ç—å—Å—è
  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å this –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  –ß–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è –∑–∞–º–∏–∫–∞–Ω—å (closures)
*/
// sayHello(); // ‚ùå –ü–æ–º–∏–ª–∫–∞! Hoisting –Ω–µ –ø—Ä–∞—Ü—é—î

const sayHello = function () {
  console.log("–ü—Ä–∏–≤—ñ—Ç!");
};

sayHello(); // ‚úÖ "–ü—Ä–∏–≤—ñ—Ç!"

/*
  3Ô∏è‚É£ –°—Ç—Ä—ñ–ª–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (Arrow Functions)
  –¶–µ –∫–æ—Ä–æ—Ç—à–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ:
  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –±–µ—Ä—É—Ç—å this –∑ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  ‚úÖ –ú–∞—é—Ç—å –∫–æ—Ä–æ—Ç—à–∏–π –∑–∞–ø–∏—Å
  ‚ùå –ù–ï –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ arguments
  ‚ùå –ù–ï –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (new ArrowFunction())

  üìù –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:

  –ù–ï –º–∞—é—Ç—å –≤–ª–∞—Å–Ω–æ–≥–æ this, –∞ –±–µ—Ä—É—Ç—å –π–æ–≥–æ –∑ –æ—Ç–æ—á–µ–Ω–Ω—è
  –ù–ï –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å arguments
  –ù–ï –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (new)

  ** arguments ‚Äî —Ü–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç, –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π (function), —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —É—Å—ñ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –¶–µ —Å—Ö–æ–∂–µ –Ω–∞ –º–∞—Å–∏–≤, –∞–ª–µ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –Ω–∏–º –Ω–µ —î.
  function showArguments() {
    console.log(arguments);
  }

  showArguments(1, 2, 3, 4);
  // ‚úÖ Output: { '0': 1, '1': 2, '2': 3, '3': 4 }
*/
const sayHello = () => console.log("–ü—Ä–∏–≤—ñ—Ç!");
sayHello(); // ‚úÖ "–ü—Ä–∏–≤—ñ—Ç!"

const add = (a, b) => a + b;
console.log(add(2, 3)); // ‚úÖ 5

/*
  4Ô∏è‚É£ –ê–Ω–æ–Ω—ñ–º–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (Anonymous Functions)
  –¶–µ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑ —ñ–º–µ–Ω—ñ, —è–∫—ñ –∑–∞–∑–≤–∏—á–∞–π –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –≤ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
  ‚úÖ –ß–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ setTimeout, setInterval, map, filter, forEach.
*/
setTimeout(function () {
  console.log("–ü—Ä–∏–≤—ñ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏!");
}, 2000);

/*
  5Ô∏è‚É£ –°–∞–º–æ–≤–∏–∫–ª–∏–∫–∞—é—á—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (IIFE - Immediately Invoked Function Expression)
  –¶–µ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.

  ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è —ñ–∑–æ–ª—è—Ü—ñ—ó –∑–º—ñ–Ω–Ω–∏—Ö
  ‚úÖ –ß–∞—Å—Ç–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞–ª–∏—Å—è –≤ —Å—Ç–∞—Ä–∏—Ö JS –ø—Ä–æ—î–∫—Ç–∞—Ö

  ** –°–∞–º–æ–≤–∏–∫–ª–∏–∫–∞—é—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è (IIFE ‚Äî Immediately Invoked Function Expression) –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —Å—Ç–≤–æ—Ä—é—é—á–∏ –ª–æ–∫–∞–ª—å–Ω—É –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—ñ –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö. –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –∑–º—ñ–Ω–Ω—ñ, –æ–≥–æ–ª–æ—à–µ–Ω—ñ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ IIFE, –Ω–µ –ø–æ—Ç—Ä–∞–ø–ª—è—é—Ç—å —É –≥–ª–æ–±–∞–ª—å–Ω—É –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—ñ –π –Ω–µ –∑–∞–≤–∞–∂–∞—é—Ç—å —ñ–Ω—à–∏–º —á–∞—Å—Ç–∏–Ω–∞–º –∫–æ–¥—É.
  üîπ 1. –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∞–º –º—ñ–∂ –∑–º—ñ–Ω–Ω–∏–º–∏
  var message = "Hello!";

  (function() {
    var message = "–ü—Ä–∏–≤—ñ—Ç!"; // –õ–æ–∫–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞
    console.log(message); // "–ü—Ä–∏–≤—ñ—Ç!"
  })();

  console.log(message); // "Hello!" (–ì–ª–æ–±–∞–ª—å–Ω–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è)
  üîπ 2. –ú–æ–¥—É–ª—ñ (—ñ–º—ñ—Ç–∞—Ü—ñ—è private –∑–º—ñ–Ω–Ω–∏—Ö)
  var Counter = (function() {
  var count = 0; // –ü—Ä–∏–≤–∞—Ç–Ω–∞ –∑–º—ñ–Ω–Ω–∞

    return {
      increment: function() { count++; },
      getCount: function() { return count; }
    };
  })();

  Counter.increment();
  Counter.increment();
  console.log(Counter.getCount()); // ‚úÖ 2

  console.log(typeof count); // ‚ùå ReferenceError: count is not defined
*/
(function () {
  console.log("–Ø –≤–∏–∫–æ–Ω–∞–≤—Å—è –æ–¥—Ä–∞–∑—É!");
})(); // ‚úÖ "–Ø –≤–∏–∫–æ–Ω–∞–≤—Å—è –æ–¥—Ä–∞–∑—É!"

(function (name) {
  console.log(`–ü—Ä–∏–≤—ñ—Ç, ${name}!`);
})("–Ü–≤–∞–Ω");


/*
  6Ô∏è‚É£ –§—É–Ω–∫—Ü—ñ—ó-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏
  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é new.
  üìù –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:

  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å this, —è–∫–∏–π –≤–∫–∞–∑—É—î –Ω–∞ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç
  –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è —á–µ—Ä–µ–∑ new
  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–¥–Ω–æ—Ç–∏–ø–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
  ‚ö†Ô∏è –ù–µ –ø—Ä–∞—Ü—é—é—Ç—å –∑ => —Ñ—É–Ω–∫—Ü—ñ—è–º–∏!
*/
function User(name, age) {
  this.name = name;
  this.age = age;
}
const user2 = new User("–ú–∞—Ä—ñ—è", 25);
console.log(user2.name); // ‚úÖ "–ú–∞—Ä—ñ—è"

/*
  7Ô∏è‚É£ –ó–∞–º–∏–∫–∞–Ω–Ω—è (Closures)
  –ó–∞–º–∏–∫–∞–Ω–Ω—è ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ "–∑–∞–ø–∞–º‚Äô—è—Ç–æ–≤—É—î" –∑–æ–≤–Ω—ñ—à–Ω—ñ –∑–º—ñ–Ω–Ω—ñ.
  üìù –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:

  –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏
  –Ü–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è –¥–∞–Ω–∏—Ö
  –§—É–Ω–∫—Ü—ñ—ó –∑ –ø–∞–º'—è—Ç—Ç—é (memoization)
*/
function counter() {
  let count = 0;
  return function () {
    count++;
    console.log(count);
  };
}

const increment = counter();
increment(); // ‚úÖ 1
increment(); // ‚úÖ 2
increment(); // ‚úÖ 3

/*
  8Ô∏è‚É£ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞—î —Å–∞–º–∞ —Å–µ–±–µ.
  ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è:

  –§–∞–∫—Ç–æ—Ä—ñ–∞–ª—É
  –û–±—Ö–æ–¥—É –¥–µ—Ä–µ–≤–æ–ø–æ–¥—ñ–±–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
  –†–æ–±–æ—Ç–∏ –∑ DOM
*/
function factorial(n) {
  if (n === 1) return 1;
  return n * factorial(n - 1);
}
console.log(factorial(5)); // ‚úÖ 120
/*
  END Functions:
*/